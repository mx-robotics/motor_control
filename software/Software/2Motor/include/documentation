#FOC : Documentation

### Function Documentation

A brief documentation of some "odd" functions.

#####Look up table offset calculation
If the corresponding duty cycles are calculated on the fly, each time the calculation depends heavily on the
**modulation index**. Since this is SVPWM a scheme, conveying less power is counter-intuitively means increasing the duty
cycle. Due to this phenomenon, simply creating the LUT and scaling it down with a simple ratio coefficient doesnt work.
 
The modulation index scaling represents the outputted power linearly but scaling the LUT same way produces different
results. For example, a Duty Cycle at a given angle is 400 out of 1200. To have the half power, one would normally just
divide the Duty Cycle by 2 and get 200 out of 1200, but calculating the duty cycle for the same angle with half the
modulo index gives 470. 
 
Fortunately, the difference ( offset ) between the correct duty cycle (470) and the duty cycle acquired by simply
dividing the duty cycle by 2 is defined by an affine function. In order find the parameters of this function, the
**calculateLUToffsetParameters** function is called. After the parameters are calculated, the corresponding duty cycle
is fetched from the LUT and divided by the desired factor (e.g. 0.3 of power/speed). As explained before, this value is
not correct.To get the correct value we have to calculate the offset and add it the the wrong Duty cycle. After doing so,
the result is fed to the PWM registers.


### Some Important Concepts
#####SPI Communication

The AMS sensors support up to 10 Mhz communication speed. The data is always sent at 16 bit data frames, then a CS
reset is required. 10 Mhz means 10^6 times a second a bit is sent, multiplied by 16 (data frame), equals to **1.6 
microseconds at best** for a transaction to take, of course with additional overhead from the microcontroller doing its thing.

What is measured seems to be around 5 microseconds at best, which is acceptable. Playing around with SPISettings object's
transaction speed changes this time accordingly. Any time pressing task has to be planned with this overhead.

#### Optimization 

First rule of optimization avoid micro-optimizations.


Second rule of optimization avoid premature optimizations.

The Arm Floating Point Architecture supports only floats and not doubles. The assumption that doubles will be treated as
floats since the hardware only supports that is **WRONG**. In this event, the double will converted to "software double" 
by software which has a terrible overhead. Double literals suchs as "0.125" are also subjugated to this behavior. The best 
practise is to use float literals such as "0.125f" which will allow for the usage of hardware FPU.

Division is always slower than multiplication. For example, **float x = 123.4f / 10** is slower than
**float x = 123.4f * 0.1**. This is due to the fact that multiplication being **successive** addition and division being 
**non-succesive** substraction. This is correct to such extent that integer divison can be slower than float multiplication
,even if there is no FPU.

Casting a float to int truncates the value, 3.7 to 3.0 and rounding really rounds. 3.7 to 4.0.



#### Angle Offset Calculation

Since the information acquired from the rotary encoder doesnt really track the magnetic field of the motor, there is an 
"angle offset" between the actual motor flux angle and the angle given by the sensor. This only depends on the orientation
of the sensor or the small magnet that the sensor tracks. Calculating this angle is paramount to smooth operation. Although
it can be hand tuned, it is better to automate the process so it would work right of the bat with any motor.

The idea behind the function that does this is the following: It energises the motor poles with a randonly chosen number.
(something between 0 and 360) and checks the measured angle. This gives us the actual offset. By adding 90 to this offset
we get CW motion and by substraction 90 degrees we get CCW motion. The caveat is, the offset seems to be changing by a small
amount for any given angle. In the particalar motor that this code is impelemnted, the offset changes between 190 and 175.

Hence the CCW offset around 100 and CW offset around 280 degrees. More fine tuning can be done, making a region based linearisation,
i.e. plotting the offset for any acquired angle and adjusting it on the fly. Even field-weakening effects can be acquired.

Assuming the sensor offset is 180 degrees, maximum speed results are acquired at +/- 95 degrees (for each direction).



#### Pid Command Offset
The issied command (a percentage of the modulation index) seems so correspond to actual
rps in a inversely proportianal affine way. for 5 rpm, setting the speed command to 50 works perfectly but
but 3 rps its not 30 but 33~ and for 9 rps its not 90 but ~82. A function has been written to compansete for this
behaviour since otherwise different tuning parameters were required for different speed regions.